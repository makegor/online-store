{"version":3,"sources":["components/Login/Login.module.scss","components/hooks/useTypeSelector.ts","components/Login/Login.tsx"],"names":["module","exports","useTypedSelector","useSelector","Login","isAuth","state","auth","isFetching","dispatch","useDispatch","validationsSchema","yup","shape","email","typeError","required","password","max","min","confirmPassword","oneOf","to","className","styles","container","initialValues","onSubmit","values","login","validateOnBlur","validationSchema","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","type","name","placeholder","value","onBlur","onChange","input","error","message__error","login__btn","disabled"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,WAAa,0BAA0B,MAAQ,qBAAqB,MAAQ,qBAAqB,eAAiB,gC,0FCG5JC,EAAmDC,I,iCCqGjDC,UAxFD,WAEV,IAAOC,EAAUH,GAAiB,SAAAI,GAAK,OAAIA,EAAMC,QAA1CF,OACAG,EAAcN,GAAiB,SAAAI,GAAK,OAAIA,EAAMC,QAA9CC,WAEDC,EAAWC,cAEXC,EAAoBC,MAAaC,MAAM,CACzCC,MAAOF,MAAaG,UAAU,4GAAuBD,MAAM,+BAA+BE,SAAS,kBACnGC,SAAUL,MAAaG,UAAU,4GAAuBG,IAAI,GAAI,8BAA8BC,IAAI,EAAG,0BAA0BH,SAAS,kBACxII,gBAAiBR,MAAaG,UAAU,4GAAuBM,MAAM,CAACT,IAAQ,aAAc,0BAA0BI,SAAS,oBAGnI,OAAIX,EACO,cAAC,IAAD,CAAUiB,GAAG,aAKhB,sBAAKC,UAAWC,IAAOC,UAAvB,UACI,yCACCjB,EACK,cAAC,IAAD,IACA,cAAC,IAAD,CACEkB,cAAe,CAAEZ,MAAO,GAAIG,SAAU,GAAIG,gBAAiB,IAC3DO,SAAU,SAACC,GAA0BnB,EAASoB,YAAMD,EAAOd,MAAOc,EAAOX,YACzEa,gBAAc,EACdC,iBAAkBpB,EAJpB,SAMG,gBAAGiB,EAAH,EAAGA,OAAQI,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAA0BC,GAApE,EAAsDC,aAAtD,EAAoED,SAASE,EAA7E,EAA6EA,MAA7E,OACG,eAAC,IAAD,WACI,gCACI,uBACIC,KAAK,QACLC,KAAK,QACLC,YAAa,SACbC,MAAOd,EAAOd,MACd6B,OAAQR,EACRS,SAAUV,EACVX,UAAWC,IAAOqB,MAAQ,KAAOb,EAAOlB,OAASmB,EAAQnB,MAAQU,IAAOsB,MAAQ,MAEnFb,EAAQnB,OAASkB,EAAOlB,OAAS,qBAAKS,UAAWC,IAAOuB,eAAvB,SAAwCf,EAAOlB,WAErF,+BACOkB,EAAOlB,OAASmB,EAAQnB,MACrB,gCACE,uBACIyB,KAAK,WACLC,KAAK,WACLC,YAAa,YACbC,MAAOd,EAAOX,SACd0B,OAAQR,EACRS,SAAUV,EACVX,UAAWC,IAAOqB,MAAQ,KAAOb,EAAOf,UAAYgB,EAAQhB,SAAWO,IAAOsB,MAAQ,MAEzFb,EAAQhB,UAAYe,EAAOf,UAAY,qBAAKM,UAAWC,IAAOuB,eAAvB,SAAwCf,EAAOf,cAEzF,0BAIV,+BACOe,EAAOlB,OAASmB,EAAQnB,MACrB,gCACE,uBACIyB,KAAK,WACLC,KAAK,kBACLC,YAAa,oBACbC,MAAOd,EAAOR,gBACduB,OAAQR,EACRS,SAAUV,EACVX,UAAWC,IAAOqB,MAAQ,KAAOb,EAAOZ,iBAAmBa,EAAQb,gBAAkBI,IAAOsB,MAAQ,MAEvGb,EAAQb,iBAAmBY,EAAOZ,iBAAmB,qBAAKG,UAAWC,IAAOuB,eAAvB,SAAwCf,EAAOZ,qBAEvG,0BAGV,wBAAQG,UAAWC,IAAOwB,WAAYT,KAAK,SAASU,UAAWb,IAAYE,EAA3E","file":"static/js/6.b4fb33ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__8Q50E\",\"login__btn\":\"Login_login__btn__363Em\",\"input\":\"Login_input__2Cp0W\",\"error\":\"Login_error__30R9e\",\"message__error\":\"Login_message__error__3B6GA\"};","import { TypedUseSelectorHook, useSelector } from \"react-redux\"\r\nimport { RootState } from \"../../redux/store\"\r\n\r\n\r\nexport const useTypedSelector:TypedUseSelectorHook<RootState> = useSelector","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { login } from '../../redux/auth-reducer'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { Formik, Form } from 'formik'\r\nimport * as yup from 'yup'\r\nimport { useTypedSelector } from '../hooks/useTypeSelector'\r\n\r\nimport styles from './Login.module.scss'\r\nimport { PreloaderLogin } from '../common/preloader/preloader'\r\n\r\ninterface LoginSingIn{\r\n    email: string\r\n    password: string\r\n    confirmPassword?: string\r\n}\r\n\r\nconst Login = () => {\r\n\r\n    const {isAuth} = useTypedSelector(state => state.auth)\r\n    const {isFetching} = useTypedSelector(state => state.auth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const validationsSchema = yup.object().shape({\r\n        email: yup.string().typeError('Должно быть строкой').email('Email must be a valid email').required('Required field'),\r\n        password: yup.string().typeError('Должно быть строкой').max(25, 'No more than 25 characters').min(5, 'More than 5 characters').required('Required field'),\r\n        confirmPassword: yup.string().typeError('Должно быть строкой').oneOf([yup.ref('password')], 'Passwords do not match').required('Required field')\r\n    })\r\n\r\n    if (isAuth) {\r\n        return <Navigate to=\"/buy/bag\" />\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div className={styles.container}>\r\n                <h1>SING IN</h1>\r\n                {isFetching\r\n                    ? <PreloaderLogin />\r\n                    : <Formik\r\n                        initialValues={{ email: '', password: '', confirmPassword: ''}}\r\n                        onSubmit={(values: LoginSingIn) => { dispatch(login(values.email, values.password)) }}\r\n                        validateOnBlur\r\n                        validationSchema={validationsSchema}\r\n                    >\r\n                        {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isValid, dirty }) => (\r\n                            <Form>\r\n                                <div>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        name=\"email\"\r\n                                        placeholder={\"Email:\"}\r\n                                        value={values.email}\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}\r\n                                        className={styles.input + \" \" + (errors.email && touched.email ? styles.error : \"\")}\r\n                                    />\r\n                                    {touched.email && errors.email && <div className={styles.message__error}>{errors.email}</div>}\r\n                                </div>\r\n                                <div>\r\n                                    {(!errors.email && touched.email)\r\n                                        ? <div>\r\n                                            <input\r\n                                                type=\"password\"\r\n                                                name=\"password\"\r\n                                                placeholder={\"Password:\"}\r\n                                                value={values.password}\r\n                                                onBlur={handleBlur}\r\n                                                onChange={handleChange}\r\n                                                className={styles.input + \" \" + (errors.password && touched.password ? styles.error : \"\")}\r\n                                            />\r\n                                            {touched.password && errors.password && <div className={styles.message__error}>{errors.password}</div>}\r\n                                        </div>\r\n                                        : <div></div>\r\n\r\n                                    }\r\n                                </div>\r\n                                <div>\r\n                                    {(!errors.email && touched.email)\r\n                                        ? <div>\r\n                                            <input\r\n                                                type=\"password\"\r\n                                                name=\"confirmPassword\"\r\n                                                placeholder={\"Confirm Password:\"}\r\n                                                value={values.confirmPassword}\r\n                                                onBlur={handleBlur}\r\n                                                onChange={handleChange}\r\n                                                className={styles.input + \" \" + (errors.confirmPassword && touched.confirmPassword ? styles.error : \"\")}\r\n                                            />\r\n                                            {touched.confirmPassword && errors.confirmPassword && <div className={styles.message__error}>{errors.confirmPassword}</div>}\r\n                                        </div>\r\n                                        : <div></div>\r\n                                    }\r\n                                </div>\r\n                                <button className={styles.login__btn} type=\"submit\" disabled={!isValid && !dirty}>login</button>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login"],"sourceRoot":""}